import './polyfills.server.mjs';
import{a as g}from"./chunk-TRU4LM35.mjs";import{Lc as d,N as c,Q as l,d as a}from"./chunk-HZT3DEIN.mjs";var n=class extends Error{};n.prototype.name="InvalidTokenError";function f(o){return decodeURIComponent(atob(o).replace(/(.)/g,(r,e)=>{let t=e.charCodeAt(0).toString(16).toUpperCase();return t.length<2&&(t="0"+t),"%"+t}))}function h(o){let r=o.replace(/-/g,"+").replace(/_/g,"/");switch(r.length%4){case 0:break;case 2:r+="==";break;case 3:r+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return f(r)}catch{return atob(r)}}function p(o,r){if(typeof o!="string")throw new n("Invalid token specified: must be a string");r||(r={});let e=r.header===!0?0:1,t=o.split(".")[e];if(typeof t!="string")throw new n(`Invalid token specified: missing part #${e+1}`);let i;try{i=h(t)}catch(s){throw new n(`Invalid token specified: invalid base64 for part #${e+1} (${s.message})`)}try{return JSON.parse(i)}catch(s){throw new n(`Invalid token specified: invalid json for part #${e+1} (${s.message})`)}}var I=(()=>{class o extends g{constructor(e){super(e),this.http=e,this.loggedIn=new a(!1),this.isLoggedIn=this.loggedIn.asObservable(),typeof window<"u"&&typeof localStorage<"u"&&this.loggedIn.next(this.hasToken())}loginSuccess(e){let t=e?.data;console.log(t),typeof t=="string"&&t.length>0?(typeof window<"u"&&typeof localStorage<"u"&&localStorage.setItem("accessToken",t),this.loggedIn.next(!0),this.saveUserData()):console.warn("No token string found in response")}getStoredTokenString(){if(typeof window>"u"||typeof localStorage>"u")return;let e=localStorage.getItem("accessToken");return typeof e=="string"&&e.length>0?e:void 0}hasToken(){return!!this.getStoredTokenString()}saveUserData(){let e=this.getStoredTokenString();if(e&&e.split(".").length===3)try{this.userdata=p(e)}catch{}}logout(){localStorage.removeItem("accessToken"),this.loggedIn.next(!1),this.userdata=null}setRegister(e){return this.HttpClient.post(`${this.baseUrl}/auth/register`,e)}setlogin(e){return this.HttpClient.post(`${this.baseUrl}/auth/login`,e)}setForgetPass(e){return this.HttpClient.post(`${this.baseUrl}/auth/password/forget`,{email:e})}setOTP(e){return this.HttpClient.post(`${this.baseUrl}/auth/password/otp/verify`,e)}static{this.\u0275fac=function(t){return new(t||o)(l(d))}}static{this.\u0275prov=c({token:o,factory:o.\u0275fac,providedIn:"root"})}}return o})();export{I as a};
